/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module spi_exe_unit_4_rtl(i_rst, i_sclk, i_mosi, o_miso, i_cs);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  input i_cs;
  input i_mosi;
  input i_rst;
  input i_sclk;
  output o_miso;
  reg s_bit;
  wire s_bit_next;
  wire s_transfer;
  wire \shift_out.i_bit ;
  wire \shift_out.i_clk_p ;
  wire [4:0] \shift_out.i_data ;
  wire \shift_out.i_en ;
  wire \shift_out.i_rst_n ;
  wire \shift_out.i_wrt ;
  wire \shift_out.o_bit ;
  wire [4:0] \shift_out.o_data ;
  reg [4:0] \shift_out.s_shifter ;
  wire [4:0] \shift_out.s_shifter_next ;
  assign s_transfer = ~i_cs;
  assign o_miso = s_bit & s_transfer;
  always @(negedge i_sclk or negedge i_rst)
    if (!i_rst)
      s_bit <= 0;
    else
      s_bit <= s_bit_next;
  assign _00_ = ~\shift_out.i_wrt ;
  assign _01_ = ~\shift_out.i_en ;
  assign _02_ = \shift_out.i_bit  & _00_;
  assign _03_ = \shift_out.i_data [0] & \shift_out.i_wrt ;
  assign _04_ = \shift_out.s_shifter [0] | \shift_out.i_en ;
  assign _05_ = _01_ | _03_;
  assign _06_ = _02_ | _05_;
  assign \shift_out.s_shifter_next [0] = _04_ & _06_;
  assign _07_ = _00_ & \shift_out.s_shifter [0];
  assign _08_ = \shift_out.i_wrt  & \shift_out.i_data [1];
  assign _09_ = \shift_out.i_en  | \shift_out.s_shifter [1];
  assign _10_ = _01_ | _08_;
  assign _11_ = _07_ | _10_;
  assign \shift_out.s_shifter_next [1] = _09_ & _11_;
  assign _12_ = _00_ & \shift_out.s_shifter [1];
  assign _13_ = \shift_out.i_wrt  & \shift_out.i_data [2];
  assign _14_ = \shift_out.i_en  | \shift_out.s_shifter [2];
  assign _15_ = _01_ | _13_;
  assign _16_ = _12_ | _15_;
  assign \shift_out.s_shifter_next [2] = _14_ & _16_;
  assign _17_ = _00_ & \shift_out.s_shifter [2];
  assign _18_ = \shift_out.i_wrt  & \shift_out.i_data [3];
  assign _19_ = \shift_out.i_en  | \shift_out.s_shifter [3];
  assign _20_ = _01_ | _18_;
  assign _21_ = _17_ | _20_;
  assign \shift_out.s_shifter_next [3] = _19_ & _21_;
  assign _22_ = _00_ & \shift_out.s_shifter [3];
  assign _23_ = \shift_out.i_wrt  & \shift_out.i_data [4];
  assign _24_ = \shift_out.i_en  | \shift_out.s_shifter [4];
  assign _25_ = _01_ | _23_;
  assign _26_ = _22_ | _25_;
  assign \shift_out.s_shifter_next [4] = _24_ & _26_;
  always @(posedge \shift_out.i_clk_p  or negedge \shift_out.i_rst_n )
    if (!\shift_out.i_rst_n )
      \shift_out.s_shifter [0] <= 0;
    else
      \shift_out.s_shifter [0] <= \shift_out.s_shifter_next [0];
  always @(posedge \shift_out.i_clk_p  or negedge \shift_out.i_rst_n )
    if (!\shift_out.i_rst_n )
      \shift_out.s_shifter [1] <= 0;
    else
      \shift_out.s_shifter [1] <= \shift_out.s_shifter_next [1];
  always @(posedge \shift_out.i_clk_p  or negedge \shift_out.i_rst_n )
    if (!\shift_out.i_rst_n )
      \shift_out.s_shifter [2] <= 0;
    else
      \shift_out.s_shifter [2] <= \shift_out.s_shifter_next [2];
  always @(posedge \shift_out.i_clk_p  or negedge \shift_out.i_rst_n )
    if (!\shift_out.i_rst_n )
      \shift_out.s_shifter [3] <= 0;
    else
      \shift_out.s_shifter [3] <= \shift_out.s_shifter_next [3];
  always @(posedge \shift_out.i_clk_p  or negedge \shift_out.i_rst_n )
    if (!\shift_out.i_rst_n )
      \shift_out.s_shifter [4] <= 0;
    else
      \shift_out.s_shifter [4] <= \shift_out.s_shifter_next [4];
  assign \shift_out.i_bit  = i_mosi;
  assign \shift_out.i_clk_p  = i_sclk;
  assign \shift_out.i_data  = 5'h00;
  assign \shift_out.i_en  = s_transfer;
  assign \shift_out.i_rst_n  = i_rst;
  assign \shift_out.i_wrt  = 1'h0;
  assign s_bit_next = \shift_out.o_bit ;
  assign \shift_out.o_bit  = \shift_out.s_shifter [4];
  assign \shift_out.o_data  = \shift_out.s_shifter ;
endmodule
