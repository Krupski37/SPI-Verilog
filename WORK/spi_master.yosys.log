
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `spi_master.ys' --

1. Executing Verilog-2005 frontend: ../MODEL/SPI_MASTER/spi_master.sv
Parsing SystemVerilog input from `../MODEL/SPI_MASTER/spi_master.sv' to AST representation.
Generating RTLIL representation for module `\spi_master'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../MODEL/SPI_MASTER/shifter.sv
Parsing SystemVerilog input from `../MODEL/SPI_MASTER/shifter.sv' to AST representation.
Generating RTLIL representation for module `\shifter'.
Warning: wire '\s_bit_next' is assigned in a block at ../MODEL/SPI_MASTER/shifter.sv:25.
Warning: wire '\s_bit' is assigned in a block at ../MODEL/SPI_MASTER/shifter.sv:46.
../MODEL/SPI_MASTER/shifter.sv:25: Warning: Identifier `\s_bit_next' is implicitly declared.
../MODEL/SPI_MASTER/shifter.sv:25: Warning: Identifier `\s_bit' is implicitly declared.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ../MODEL/SPI_MASTER/watchdog.sv
Parsing SystemVerilog input from `../MODEL/SPI_MASTER/watchdog.sv' to AST representation.
Generating RTLIL representation for module `\watchdog'.
Successfully finished Verilog frontend.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Executing AST frontend in derive mode using pre-parsed AST for module `\watchdog'.
Parameter \N = 6
Generating RTLIL representation for module `$paramod\watchdog\N=6'.

4.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\shifter'.
Parameter \N = 20
Generating RTLIL representation for module `$paramod\shifter\N=20'.
Warning: wire '\s_bit_next' is assigned in a block at ../MODEL/SPI_MASTER/shifter.sv:25.
Warning: wire '\s_bit' is assigned in a block at ../MODEL/SPI_MASTER/shifter.sv:46.
../MODEL/SPI_MASTER/shifter.sv:25: Warning: Identifier `\s_bit_next' is implicitly declared.
../MODEL/SPI_MASTER/shifter.sv:25: Warning: Identifier `\s_bit' is implicitly declared.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/shifter.sv:39$24 in module $paramod\shifter\N=20.
Marked 2 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/shifter.sv:19$23 in module $paramod\shifter\N=20.
Marked 3 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/watchdog.sv:35$19 in module $paramod\watchdog\N=6.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/watchdog.sv:20$17 in module $paramod\watchdog\N=6.
Marked 3 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/watchdog.sv:35$13 in module watchdog.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/watchdog.sv:20$11 in module watchdog.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/shifter.sv:39$9 in module shifter.
Marked 2 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/shifter.sv:19$8 in module shifter.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/spi_master.sv:192$6 in module spi_master.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/spi_master.sv:184$4 in module spi_master.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/spi_master.sv:170$2 in module spi_master.
Marked 9 switch rules as full_case in process $proc$../MODEL/SPI_MASTER/spi_master.sv:55$1 in module spi_master.
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rst_n in `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:39$24'.
Found async reset \i_rst_n in `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$17'.
Found async reset \i_rst_n in `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$11'.
Found async reset \i_rst_n in `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:39$9'.
Found async reset \i_rst in `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:192$6'.
Found async reset \i_rst in `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:184$4'.
Found async reset \i_rst in `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:170$2'.

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:39$24'.
     1/2: $0\s_shifter[19:0]
     2/2: $0\s_bit[0:0]
Creating decoders for process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:19$23'.
     1/8: $2\s_shifter_next[19:0]
     2/8: $2\s_bit_next[0:0]
     3/8: $1\s_bit_next[0:0]
     4/8: $1\s_shifter_next[19:0]
     5/8: $0\s_bit_next[0:0]
     6/8: $0\s_shifter_next[19:0]
     7/8: $0\o_bit[0:0]
     8/8: $0\o_data[19:0]
Creating decoders for process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$19'.
     1/9: $3\o_inter[0:0]
     2/9: $2\s_count_next[5:0]
     3/9: $2\o_inter[0:0]
     4/9: $1\s_count_next[5:0]
     5/9: $1\s_cycles_next[5:0]
     6/9: $1\o_inter[0:0]
     7/9: $0\o_inter[0:0]
     8/9: $0\s_count_next[5:0]
     9/9: $0\s_cycles_next[5:0]
Creating decoders for process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$17'.
     1/2: $0\s_cycles[5:0]
     2/2: $0\s_count[5:0]
Creating decoders for process `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$13'.
     1/9: $3\o_inter[0:0]
     2/9: $2\s_count_next[19:0]
     3/9: $2\o_inter[0:0]
     4/9: $1\s_count_next[19:0]
     5/9: $1\s_cycles_next[19:0]
     6/9: $1\o_inter[0:0]
     7/9: $0\o_inter[0:0]
     8/9: $0\s_count_next[19:0]
     9/9: $0\s_cycles_next[19:0]
Creating decoders for process `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$11'.
     1/2: $0\s_cycles[19:0]
     2/2: $0\s_count[19:0]
Creating decoders for process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:39$9'.
     1/2: $0\s_shifter[19:0]
     2/2: $0\s_bit[0:0]
Creating decoders for process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:19$8'.
     1/8: $2\s_shifter_next[19:0]
     2/8: $2\s_bit_next[0:0]
     3/8: $1\s_bit_next[0:0]
     4/8: $1\s_shifter_next[19:0]
     5/8: $0\s_bit_next[0:0]
     6/8: $0\s_shifter_next[19:0]
     7/8: $0\o_bit[0:0]
     8/8: $0\o_data[19:0]
Creating decoders for process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:192$6'.
     1/1: $0\s_bit_in[0:0]
Creating decoders for process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:184$4'.
     1/1: $0\o_mosi[0:0]
Creating decoders for process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:170$2'.
     1/1: $0\s_state[2:0]
Creating decoders for process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
     1/23: $7\o_ss[2:0]
     2/23: $6\o_ss[2:0]
     3/23: $3\s_state_next[2:0]
     4/23: $5\o_ss[2:0]
     5/23: $4\o_ss[2:0]
     6/23: $3\o_ss[2:0]
     7/23: $2\o_ss[2:0]
     8/23: $2\s_state_next[2:0]
     9/23: $1\s_state_next[2:0]
    10/23: $1\s_watchdog_we[0:0]
    11/23: $1\s_sout_wrt[0:0]
    12/23: $1\s_sout_en[0:0]
    13/23: $1\o_ss[2:0]
    14/23: $1\o_sclk[0:0]
    15/23: $1\o_busy[0:0]
    16/23: $0\s_state_next[2:0]
    17/23: $0\s_watchdog_we[0:0]
    18/23: $0\s_sout_wrt[0:0]
    19/23: $0\s_sout_en[0:0]
    20/23: $0\o_ss[2:0]
    21/23: $0\o_sclk[0:0]
    22/23: $0\o_busy[0:0]
    23/23: { $0\s_sin_en[0:0] $0\s_sin_wrt[0:0] }

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\shifter\N=20.\o_data' from process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:19$23'.
No latch inferred for signal `$paramod\shifter\N=20.\o_bit' from process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:19$23'.
No latch inferred for signal `$paramod\shifter\N=20.\s_shifter_next' from process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:19$23'.
No latch inferred for signal `$paramod\shifter\N=20.\s_bit_next' from process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:19$23'.
No latch inferred for signal `$paramod\watchdog\N=6.\o_inter' from process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$19'.
No latch inferred for signal `$paramod\watchdog\N=6.\s_cycles_next' from process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$19'.
No latch inferred for signal `$paramod\watchdog\N=6.\s_count_next' from process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$19'.
No latch inferred for signal `\watchdog.\o_inter' from process `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$13'.
No latch inferred for signal `\watchdog.\s_cycles_next' from process `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$13'.
No latch inferred for signal `\watchdog.\s_count_next' from process `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$13'.
No latch inferred for signal `\shifter.\o_data' from process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:19$8'.
No latch inferred for signal `\shifter.\o_bit' from process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:19$8'.
No latch inferred for signal `\shifter.\s_shifter_next' from process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:19$8'.
No latch inferred for signal `\shifter.\s_bit_next' from process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:19$8'.
No latch inferred for signal `\spi_master.\o_busy' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\o_sclk' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\o_ss' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\s_sout_en' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\s_sout_wrt' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\s_sin_en' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\s_sin_wrt' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\s_watchdog_we' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
No latch inferred for signal `\spi_master.\s_state_next' from process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\shifter\N=20.\s_bit' using process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:39$24'.
  created $adff cell `$procdff$254' with positive edge clock and negative level reset.
Creating register for signal `$paramod\shifter\N=20.\s_shifter' using process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:39$24'.
  created $adff cell `$procdff$255' with positive edge clock and negative level reset.
Creating register for signal `$paramod\watchdog\N=6.\s_count' using process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$17'.
  created $adff cell `$procdff$256' with positive edge clock and negative level reset.
Creating register for signal `$paramod\watchdog\N=6.\s_cycles' using process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$17'.
  created $adff cell `$procdff$257' with positive edge clock and negative level reset.
Creating register for signal `\watchdog.\s_count' using process `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$11'.
  created $adff cell `$procdff$258' with positive edge clock and negative level reset.
Creating register for signal `\watchdog.\s_cycles' using process `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$11'.
  created $adff cell `$procdff$259' with positive edge clock and negative level reset.
Creating register for signal `\shifter.\s_bit' using process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:39$9'.
  created $adff cell `$procdff$260' with positive edge clock and negative level reset.
Creating register for signal `\shifter.\s_shifter' using process `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:39$9'.
  created $adff cell `$procdff$261' with positive edge clock and negative level reset.
Creating register for signal `\spi_master.\s_bit_in' using process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:192$6'.
  created $adff cell `$procdff$262' with positive edge clock and negative level reset.
Creating register for signal `\spi_master.\o_mosi' using process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:184$4'.
  created $adff cell `$procdff$263' with negative edge clock and negative level reset.
Creating register for signal `\spi_master.\s_state' using process `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:170$2'.
  created $adff cell `$procdff$264' with positive edge clock and negative level reset.

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:39$24'.
Found and cleaned up 2 empty switches in `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:19$23'.
Removing empty process `$paramod\shifter\N=20.$proc$../MODEL/SPI_MASTER/shifter.sv:19$23'.
Found and cleaned up 3 empty switches in `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$19'.
Removing empty process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$19'.
Removing empty process `$paramod\watchdog\N=6.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$17'.
Found and cleaned up 3 empty switches in `\watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$13'.
Removing empty process `watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:35$13'.
Removing empty process `watchdog.$proc$../MODEL/SPI_MASTER/watchdog.sv:20$11'.
Removing empty process `shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:39$9'.
Found and cleaned up 2 empty switches in `\shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:19$8'.
Removing empty process `shifter.$proc$../MODEL/SPI_MASTER/shifter.sv:19$8'.
Removing empty process `spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:192$6'.
Removing empty process `spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:184$4'.
Removing empty process `spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:170$2'.
Found and cleaned up 9 empty switches in `\spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
Removing empty process `spi_master.$proc$../MODEL/SPI_MASTER/spi_master.sv:55$1'.
Cleaned up 19 empty switches.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
<suppressed ~1 debug messages>
Optimizing module watchdog.
<suppressed ~1 debug messages>
Optimizing module shifter.
Optimizing module spi_master.
<suppressed ~2 debug messages>

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \watchdog..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Removed 15 unused cells and 131 unused wires.
<suppressed ~24 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\shifter\N=20..
checking module $paramod\watchdog\N=6..
checking module shifter..
checking module spi_master..
checking module watchdog..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
<suppressed ~150 debug messages>
Finding identical cells in module `\watchdog'.
Removed a total of 50 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$30.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$51.
    dead port 1/2 on $mux $procmux$57.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$96.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$146.
    dead port 2/2 on $mux $procmux$117.
    dead port 2/2 on $mux $procmux$158.
    dead port 2/2 on $mux $procmux$127.
    dead port 2/2 on $mux $procmux$171.
    dead port 2/2 on $mux $procmux$135.
    dead port 2/2 on $mux $procmux$185.
    dead port 2/2 on $mux $procmux$197.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$75.
    dead port 1/2 on $mux $procmux$81.
Removed 14 multiplexer ports.
<suppressed ~15 debug messages>

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
    New ctrl vector for $pmux cell $procmux$213: $auto$opt_reduce.cc:132:opt_mux$266
    New ctrl vector for $pmux cell $procmux$221: $auto$opt_reduce.cc:132:opt_mux$268
    New ctrl vector for $pmux cell $procmux$227: $auto$opt_reduce.cc:132:opt_mux$270
    New ctrl vector for $pmux cell $procmux$242: $auto$opt_reduce.cc:132:opt_mux$272
    New ctrl vector for $pmux cell $procmux$247: $auto$opt_reduce.cc:132:opt_mux$274
    New ctrl vector for $pmux cell $procmux$201: { $procmux$198_CMP $procmux$186_CMP $auto$opt_reduce.cc:132:opt_mux$276 $procmux$136_CMP $procmux$128_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$265: { $procmux$172_CMP $procmux$186_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$267: { $procmux$172_CMP $procmux$186_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$269: { $procmux$136_CMP $procmux$159_CMP $procmux$172_CMP $procmux$186_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$271: { $procmux$128_CMP $procmux$159_CMP $procmux$172_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$273: { $procmux$118_CMP $procmux$128_CMP $procmux$136_CMP $procmux$159_CMP $procmux$172_CMP $procmux$186_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$275: { $procmux$159_CMP $procmux$172_CMP }
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 12 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
<suppressed ~21 debug messages>
Finding identical cells in module `\watchdog'.
Removed a total of 7 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 0 unused cells and 70 unused wires.
<suppressed ~5 debug messages>

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.6.9. Rerunning OPT passes. (Maybe there is more to do..)

4.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

4.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
    New ctrl vector for $pmux cell $procmux$233: $auto$opt_reduce.cc:132:opt_mux$278
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$277: { $procmux$118_CMP $procmux$128_CMP $procmux$136_CMP $procmux$159_CMP $procmux$172_CMP $procmux$186_CMP }
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 2 changes.

4.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.6.16. Rerunning OPT passes. (Maybe there is more to do..)

4.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

4.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 0 changes.

4.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
<suppressed ~3 debug messages>
Finding identical cells in module `\watchdog'.
Removed a total of 1 cells.

4.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.6.23. Rerunning OPT passes. (Maybe there is more to do..)

4.6.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

4.6.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 0 changes.

4.6.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.6.27. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.6.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.6.30. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell $paramod\watchdog\N=6.$gt$../MODEL/SPI_MASTER/watchdog.sv:53$20 ($gt).
Removed top 31 bits (of 32) from port B of cell $paramod\watchdog\N=6.$sub$../MODEL/SPI_MASTER/watchdog.sv:54$21 ($sub).
Removed top 26 bits (of 32) from port Y of cell $paramod\watchdog\N=6.$sub$../MODEL/SPI_MASTER/watchdog.sv:54$21 ($sub).
Removed top 26 bits (of 32) from wire $paramod\watchdog\N=6.$sub$../MODEL/SPI_MASTER/watchdog.sv:54$21_Y.
Removed top 1 bits (of 3) from port B of cell spi_master.$procmux$114_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_master.$procmux$115_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell spi_master.$procmux$116_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_master.$procmux$136_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_master.$procmux$159_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell spi_master.$procmux$172_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell watchdog.$gt$../MODEL/SPI_MASTER/watchdog.sv:53$14 ($gt).
Removed top 31 bits (of 32) from port B of cell watchdog.$sub$../MODEL/SPI_MASTER/watchdog.sv:54$15 ($sub).
Removed top 12 bits (of 32) from port Y of cell watchdog.$sub$../MODEL/SPI_MASTER/watchdog.sv:54$15 ($sub).
Removed top 12 bits (of 32) from wire watchdog.$sub$../MODEL/SPI_MASTER/watchdog.sv:54$15_Y.

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~140 debug messages>

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\shifter\N=20:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\watchdog\N=6:
  creating $macc model for $sub$../MODEL/SPI_MASTER/watchdog.sv:54$21 ($sub).
  creating $alu model for $macc $sub$../MODEL/SPI_MASTER/watchdog.sv:54$21.
  creating $alu model for $gt$../MODEL/SPI_MASTER/watchdog.sv:53$20 ($gt): new $alu
  creating $alu cell for $gt$../MODEL/SPI_MASTER/watchdog.sv:53$20: $auto$alumacc.cc:474:replace_alu$282
  creating $alu cell for $sub$../MODEL/SPI_MASTER/watchdog.sv:54$21: $auto$alumacc.cc:474:replace_alu$287
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module shifter:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module spi_master:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module watchdog:
  creating $macc model for $sub$../MODEL/SPI_MASTER/watchdog.sv:54$15 ($sub).
  creating $alu model for $macc $sub$../MODEL/SPI_MASTER/watchdog.sv:54$15.
  creating $alu model for $gt$../MODEL/SPI_MASTER/watchdog.sv:53$14 ($gt): new $alu
  creating $alu cell for $gt$../MODEL/SPI_MASTER/watchdog.sv:53$14: $auto$alumacc.cc:474:replace_alu$291
  creating $alu cell for $sub$../MODEL/SPI_MASTER/watchdog.sv:54$15: $auto$alumacc.cc:474:replace_alu$296
  created 2 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
<suppressed ~2 debug messages>
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.
<suppressed ~2 debug messages>

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 2 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.13.9. Rerunning OPT passes. (Maybe there is more to do..)

4.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

4.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 0 changes.

4.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.13.16. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register spi_master.s_state.

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\s_state' from module `\spi_master'.
  found $adff cell for state register: $procdff$264
  root of input selection tree: \s_state_next
  found reset state: 3'000 (from async reset)
  found ctrl input: $procmux$128_CMP
  found ctrl input: $procmux$136_CMP
  found ctrl input: $auto$opt_reduce.cc:132:opt_mux$276
  found ctrl input: $procmux$186_CMP
  found ctrl input: $procmux$198_CMP
  found state code: 3'110
  found ctrl input: \s_inter
  found state code: 3'010
  found state code: 3'100
  found state code: 3'011
  found state code: 3'001
  found ctrl input: \i_send
  found state code: 3'101
  found ctrl output: $procmux$118_CMP
  found ctrl output: $procmux$128_CMP
  found ctrl output: $procmux$136_CMP
  found ctrl output: $procmux$159_CMP
  found ctrl output: $procmux$172_CMP
  found ctrl output: $procmux$186_CMP
  found ctrl output: $procmux$198_CMP
  ctrl inputs: { $auto$opt_reduce.cc:132:opt_mux$276 \s_inter \i_send }
  ctrl outputs: { $procmux$198_CMP $procmux$186_CMP $procmux$172_CMP $procmux$159_CMP $procmux$136_CMP $procmux$128_CMP $procmux$118_CMP \s_state_next }
  transition:      3'000 3'--0 ->      3'000 10'1000000000
  transition:      3'000 3'--1 ->      3'101 10'1000000101
  transition:      3'100 3'--- ->      3'110 10'0000010110
  transition:      3'010 3'--- ->      3'011 10'0001000011
  transition:      3'110 3'--- ->      3'000 10'0000001000
  transition:      3'001 3'--- ->      3'011 10'0010000011
  transition:      3'101 3'--- ->      3'001 10'0100000001
  transition:      3'011 3'-0- ->      3'010 10'0000100010
  transition:      3'011 3'-1- ->      3'100 10'0000100100

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\s_state$299' from module `\spi_master'.
  Removing unused input signal $auto$opt_reduce.cc:132:opt_mux$276.

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 12 unused cells and 12 unused wires.
<suppressed ~13 debug messages>

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\s_state$299' from module `\spi_master'.
  Removing unused output signal \s_state_next [0].
  Removing unused output signal \s_state_next [1].
  Removing unused output signal \s_state_next [2].
  Removing unused output signal $procmux$198_CMP.

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\s_state$299' from module `\spi_master' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ------1
  100 -> -----1-
  010 -> ----1--
  110 -> ---1---
  001 -> --1----
  101 -> -1-----
  011 -> 1------

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\s_state$299' from module `\spi_master':
-------------------------------------

  Information on FSM $fsm$\s_state$299 (\s_state):

  Number of input signals:    2
  Number of output signals:   6
  Number of state bits:       7

  Input signals:
    0: \i_send
    1: \s_inter

  Output signals:
    0: $procmux$118_CMP
    1: $procmux$128_CMP
    2: $procmux$136_CMP
    3: $procmux$159_CMP
    4: $procmux$172_CMP
    5: $procmux$186_CMP

  State encoding:
    0:  7'------1  <RESET STATE>
    1:  7'-----1-
    2:  7'----1--
    3:  7'---1---
    4:  7'--1----
    5:  7'-1-----
    6:  7'1------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 2'-0   ->     0 6'000000
      1:     0 2'-1   ->     5 6'000000
      2:     1 2'--   ->     3 6'000010
      3:     2 2'--   ->     6 6'001000
      4:     3 2'--   ->     0 6'000001
      5:     4 2'--   ->     6 6'010000
      6:     5 2'--   ->     4 6'100000
      7:     6 2'1-   ->     1 6'000100
      8:     6 2'0-   ->     2 6'000100

-------------------------------------

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\s_state$299' from module `\spi_master'.

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
<suppressed ~4 debug messages>
Optimizing module watchdog.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 0 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
<suppressed ~1 debug messages>
Optimizing module shifter.
Optimizing module spi_master.
<suppressed ~4 debug messages>
Optimizing module watchdog.
<suppressed ~1 debug messages>

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$273: { \s_state [1] \s_state [2] \s_state [3] \s_state [4] \s_state [5] \s_state [6] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$269: { \s_state [2] \s_state [4] \s_state [5] \s_state [6] }
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$329: { \s_state [2] \s_state [4] }
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 3 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\watchdog\N=6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \watchdog..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=20.
  Optimizing cells in module $paramod\watchdog\N=6.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_master.
  Optimizing cells in module \watchdog.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
Optimizing module spi_master.
Optimizing module watchdog.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=20\B_WIDTH=1\Y_WIDTH=20 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
No more expansions possible.
<suppressed ~605 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
Optimizing module $paramod\watchdog\N=6.
<suppressed ~53 debug messages>
Optimizing module shifter.
Optimizing module spi_master.
<suppressed ~26 debug messages>
Optimizing module watchdog.
<suppressed ~175 debug messages>

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
<suppressed ~15 debug messages>
Finding identical cells in module `\watchdog'.
Removed a total of 5 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 57 unused cells and 213 unused wires.
<suppressed ~60 debug messages>

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `$paramod\shifter\N=20' to `<abc-temp-dir>/input.blif'..
Extracted 40 gates and 83 wires to a netlist network with 43 inputs and 20 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       40
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:       20
Removing temp directory.

4.23.2. Extracting gate netlist of module `$paramod\watchdog\N=6' to `<abc-temp-dir>/input.blif'..
Extracted 58 gates and 79 wires to a netlist network with 19 inputs and 13 outputs.

4.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:       18
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       13
Removing temp directory.

4.23.3. Extracting gate netlist of module `\shifter' to `<abc-temp-dir>/input.blif'..
Extracted 40 gates and 83 wires to a netlist network with 43 inputs and 20 outputs.

4.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.3.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       40
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:       20
Removing temp directory.

4.23.4. Extracting gate netlist of module `\spi_master' to `<abc-temp-dir>/input.blif'..
Extracted 42 gates and 56 wires to a netlist network with 12 inputs and 12 outputs.

4.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:       13
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       12
Removing temp directory.

4.23.5. Extracting gate netlist of module `\watchdog' to `<abc-temp-dir>/input.blif'..
Extracted 231 gates and 294 wires to a netlist network with 61 inputs and 41 outputs.

4.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:              AOI3 cells:        7
ABC RESULTS:               MUX cells:       60
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:       11
ABC RESULTS:               NOT cells:        8
ABC RESULTS:              OAI3 cells:        5
ABC RESULTS:                OR cells:       26
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       17
ABC RESULTS:        internal signals:      192
ABC RESULTS:           input signals:       61
ABC RESULTS:          output signals:       41
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=20.
<suppressed ~20 debug messages>
Optimizing module $paramod\watchdog\N=6.
Optimizing module shifter.
<suppressed ~20 debug messages>
Optimizing module spi_master.
<suppressed ~1 debug messages>
Optimizing module watchdog.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=20'.
Finding identical cells in module `$paramod\watchdog\N=6'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_master'.
Finding identical cells in module `\watchdog'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 2 unused cells and 413 unused wires.
<suppressed ~7 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.26. Printing statistics.

=== $paramod\shifter\N=20 ===

   Number of wires:                 30
   Number of wire bits:            106
   Number of public wires:          10
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 60
     $_DFF_PN0_                     20
     $_MUX_                         40

=== $paramod\watchdog\N=6 ===

   Number of wires:                 37
   Number of wire bits:             62
   Number of public wires:           9
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 53
     $_ANDNOT_                       4
     $_AOI3_                         1
     $_DFF_PN0_                     12
     $_MUX_                         18
     $_NOR_                          5
     $_NOT_                          2
     $_OAI3_                         1
     $_ORNOT_                        1
     $_OR_                           4
     $_XNOR_                         1
     $_XOR_                          4

=== shifter ===

   Number of wires:                 30
   Number of wire bits:            106
   Number of public wires:          10
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 60
     $_DFF_PN0_                     20
     $_MUX_                         40

=== spi_master ===

   Number of wires:                 43
   Number of wire bits:             91
   Number of public wires:          20
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $_ANDNOT_                       5
     $_AND_                          2
     $_AOI3_                         1
     $_DFF_NN0_                      1
     $_DFF_PN0_                      7
     $_DFF_PN1_                      1
     $_MUX_                          1
     $_NAND_                         2
     $_NOT_                          1
     $_OAI3_                         2
     $_ORNOT_                        3
     $_OR_                          13
     $paramod\shifter\N=20           1
     $paramod\watchdog\N=6           1

=== watchdog ===

   Number of wires:                124
   Number of wire bits:            219
   Number of public wires:           9
   Number of public wire bits:     104
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                196
     $_ANDNOT_                      17
     $_AND_                          1
     $_AOI3_                         7
     $_DFF_PN0_                     40
     $_MUX_                         60
     $_NAND_                         2
     $_NOR_                         11
     $_NOT_                          8
     $_OAI3_                         5
     $_ORNOT_                        3
     $_OR_                          23
     $_XNOR_                         2
     $_XOR_                         17

4.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\shifter\N=20..
checking module $paramod\watchdog\N=6..
checking module shifter..
checking module spi_master..
checking module watchdog..
found and reported 0 problems.

5. Executing ABC pass (technology mapping using ABC).

5.1. Extracting gate netlist of module `$paramod\shifter\N=20' to `<abc-temp-dir>/input.blif'..
Extracted 40 gates and 83 wires to a netlist network with 43 inputs and 20 outputs.

5.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       60
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       60
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:       20
Removing temp directory.

5.2. Extracting gate netlist of module `$paramod\watchdog\N=6' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 60 wires to a netlist network with 19 inputs and 13 outputs.

5.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       28
ABC RESULTS:               NOT cells:        6
ABC RESULTS:                OR cells:       30
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:       28
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       13
Removing temp directory.

5.3. Extracting gate netlist of module `\shifter' to `<abc-temp-dir>/input.blif'..
Extracted 40 gates and 83 wires to a netlist network with 43 inputs and 20 outputs.

5.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       60
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       60
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:       20
Removing temp directory.

5.4. Extracting gate netlist of module `\spi_master' to `<abc-temp-dir>/input.blif'..
Extracted 30 gates and 42 wires to a netlist network with 12 inputs and 12 outputs.

5.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        9
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:       10
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       12
Removing temp directory.

5.5. Extracting gate netlist of module `\watchdog' to `<abc-temp-dir>/input.blif'..
Extracted 156 gates and 217 wires to a netlist network with 61 inputs and 41 outputs.

5.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       80
ABC RESULTS:               NOT cells:       20
ABC RESULTS:                OR cells:      102
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:      115
ABC RESULTS:           input signals:       61
ABC RESULTS:          output signals:       41
Removing temp directory.

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=20..
Finding unused cells or wires in module $paramod\watchdog\N=6..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_master..
Finding unused cells or wires in module \watchdog..
Removed 0 unused cells and 485 unused wires.
<suppressed ~5 debug messages>

7. Executing FLATTEN pass (flatten design).
Using template $paramod\shifter\N=20 for cells of type $paramod\shifter\N=20.
Using template $paramod\watchdog\N=6 for cells of type $paramod\watchdog\N=6.
<suppressed ~2 debug messages>
No more expansions possible.

8. Executing Verilog backend.
Dumping module `\spi_master_rtl'.

Warnings: 4 unique messages, 8 total
End of script. Logfile hash: 27346dbfa3
CPU: user 0.37s system 0.01s, MEM: 19.25 MB total, 13.72 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 22% 21x opt_clean (0 sec), 16% 18x opt_expr (0 sec), ...
