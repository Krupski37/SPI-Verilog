
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `spi_slave_4.ys' --

1. Executing Verilog-2005 frontend: ../MODEL/SPI_EXE_UNIT_4/shifter.sv
Parsing SystemVerilog input from `../MODEL/SPI_EXE_UNIT_4/shifter.sv' to AST representation.
Generating RTLIL representation for module `\shifter'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv
Parsing SystemVerilog input from `../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv' to AST representation.
Generating RTLIL representation for module `\spi_exe_unit_4'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Executing AST frontend in derive mode using pre-parsed AST for module `\shifter'.
Parameter \N = 5
Generating RTLIL representation for module `$paramod\shifter\N=5'.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$9 in module $paramod\shifter\N=5.
Marked 2 switch rules as full_case in process $proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$8 in module $paramod\shifter\N=5.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:35$6 in module spi_exe_unit_4.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:21$4 in module spi_exe_unit_4.
Marked 1 switch rules as full_case in process $proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$2 in module shifter.
Marked 2 switch rules as full_case in process $proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$1 in module shifter.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rst_n in `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$9'.
Found async reset \i_rst in `\spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:35$6'.
Found async reset \i_rst_n in `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$2'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$9'.
     1/1: $0\s_shifter[4:0]
Creating decoders for process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$8'.
     1/5: $2\s_shifter_next[4:0]
     2/5: $1\s_shifter_next[4:0]
     3/5: $0\s_shifter_next[4:0]
     4/5: $0\o_bit[0:0]
     5/5: $0\o_data[4:0]
Creating decoders for process `\spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:35$6'.
     1/1: $0\s_bit[0:0]
Creating decoders for process `\spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:21$4'.
     1/4: $1\s_transfer[0:0]
     2/4: $1\o_miso[0:0]
     3/4: $0\s_transfer[0:0]
     4/4: $0\o_miso[0:0]
Creating decoders for process `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$2'.
     1/1: $0\s_shifter[3:0]
Creating decoders for process `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$1'.
     1/5: $2\s_shifter_next[3:0]
     2/5: $1\s_shifter_next[3:0]
     3/5: $0\s_shifter_next[3:0]
     4/5: $0\o_bit[0:0]
     5/5: $0\o_data[3:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\shifter\N=5.\o_bit' from process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$8'.
No latch inferred for signal `$paramod\shifter\N=5.\o_data' from process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$8'.
No latch inferred for signal `$paramod\shifter\N=5.\s_shifter_next' from process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$8'.
No latch inferred for signal `\spi_exe_unit_4.\o_miso' from process `\spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:21$4'.
No latch inferred for signal `\spi_exe_unit_4.\s_transfer' from process `\spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:21$4'.
No latch inferred for signal `\shifter.\o_bit' from process `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$1'.
No latch inferred for signal `\shifter.\o_data' from process `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$1'.
No latch inferred for signal `\shifter.\s_shifter_next' from process `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\shifter\N=5.\s_shifter' using process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$9'.
  created $adff cell `$procdff$35' with positive edge clock and negative level reset.
Creating register for signal `\spi_exe_unit_4.\s_bit' using process `\spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:35$6'.
  created $adff cell `$procdff$36' with negative edge clock and negative level reset.
Creating register for signal `\shifter.\s_shifter' using process `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$2'.
  created $adff cell `$procdff$37' with positive edge clock and negative level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$9'.
Found and cleaned up 2 empty switches in `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$8'.
Removing empty process `$paramod\shifter\N=5.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$8'.
Removing empty process `spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:35$6'.
Found and cleaned up 1 empty switch in `\spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:21$4'.
Removing empty process `spi_exe_unit_4.$proc$../MODEL/SPI_EXE_UNIT_4/spi_exe_unit_4.sv:21$4'.
Removing empty process `shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:37$2'.
Found and cleaned up 2 empty switches in `\shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$1'.
Removing empty process `shifter.$proc$../MODEL/SPI_EXE_UNIT_4/shifter.sv:18$1'.
Cleaned up 5 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module spi_exe_unit_4.
<suppressed ~2 debug messages>
Optimizing module shifter.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \spi_exe_unit_4..
Finding unused cells or wires in module \shifter..
Removed 4 unused cells and 34 unused wires.
<suppressed ~8 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\shifter\N=5..
checking module shifter..
checking module spi_exe_unit_4..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$15.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$30.
Running muxtree optimizer on module \spi_exe_unit_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~4 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=5.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_exe_unit_4.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_exe_unit_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=5.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_exe_unit_4.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\shifter\N=5:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module shifter:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module spi_exe_unit_4:
  created 0 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_exe_unit_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=5.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_exe_unit_4.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.
<suppressed ~1 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\shifter\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spi_exe_unit_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\shifter\N=5.
  Optimizing cells in module \shifter.
  Optimizing cells in module \spi_exe_unit_4.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~9 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
Optimizing module shifter.
Optimizing module spi_exe_unit_4.

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `$paramod\shifter\N=5' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 23 wires to a netlist network with 13 inputs and 5 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       10
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23.2. Extracting gate netlist of module `\shifter' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 19 wires to a netlist network with 11 inputs and 4 outputs.

3.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.2.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        8
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        4
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        4
Removing temp directory.

3.23.3. Extracting gate netlist of module `\spi_exe_unit_4' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

3.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.3.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shifter\N=5.
<suppressed ~5 debug messages>
Optimizing module shifter.
<suppressed ~4 debug messages>
Optimizing module spi_exe_unit_4.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\shifter\N=5'.
Finding identical cells in module `\shifter'.
Finding identical cells in module `\spi_exe_unit_4'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..
Removed 2 unused cells and 41 unused wires.
<suppressed ~5 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.26. Printing statistics.

=== $paramod\shifter\N=5 ===

   Number of wires:                 15
   Number of wire bits:             31
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $_DFF_PN0_                      5
     $_MUX_                         10

=== shifter ===

   Number of wires:                 14
   Number of wire bits:             26
   Number of public wires:          10
   Number of public wire bits:      22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_DFF_PN0_                      4
     $_MUX_                          8

=== spi_exe_unit_4 ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           8
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_ANDNOT_                       1
     $_DFF_NN0_                      1
     $_NOT_                          1
     $paramod\shifter\N=5            1

3.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\shifter\N=5..
checking module shifter..
checking module spi_exe_unit_4..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `$paramod\shifter\N=5' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 23 wires to a netlist network with 13 inputs and 5 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       15
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       15
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        5
Removing temp directory.

4.2. Extracting gate netlist of module `\shifter' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 19 wires to a netlist network with 11 inputs and 4 outputs.

4.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       12
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       12
ABC RESULTS:        internal signals:        4
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        4
Removing temp directory.

4.3. Extracting gate netlist of module `\spi_exe_unit_4' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

4.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shifter\N=5..
Finding unused cells or wires in module \shifter..
Finding unused cells or wires in module \spi_exe_unit_4..
Removed 0 unused cells and 46 unused wires.
<suppressed ~3 debug messages>

6. Executing FLATTEN pass (flatten design).
Using template $paramod\shifter\N=5 for cells of type $paramod\shifter\N=5.
<suppressed ~1 debug messages>
No more expansions possible.

7. Executing Verilog backend.
Dumping module `\spi_exe_unit_4_rtl'.

End of script. Logfile hash: 5ff22047ff
CPU: user 0.06s system 0.01s, MEM: 16.43 MB total, 10.89 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 12x opt_expr (0 sec), 18% 15x opt_clean (0 sec), ...
